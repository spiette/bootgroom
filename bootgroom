#!/usr/bin/env python

# This script will safely remove all unused kernels packages
# It will not remove the current kernel, or the latest kernel installed.
# It will not remove unpackaged kernels, as long as they didn't overwrite
# packaged kernels.

# 2011 GPLv2 or later
# Simon Piette <piette.simon@gmail.com>

import os
import sys
import re
import shutil
from glob import glob
from distutils.version import LooseVersion
from optparse import OptionParser
from debian_bundle import deb822

# which version are we running (uname -r)

global options

def removable_kernels(options):
    current = os.uname()[2]
    removable_versions = []
    installed_re = re.compile(r'^(\w+) (\w+) installed$')
    linux_re = re.compile(r'^linux-image-(\d+.*)')
    # We're looking for installed linux-image-{version} packages
    for pkg in deb822.Packages.iter_paragraphs(file('/var/lib/dpkg/status')):
        if  pkg.has_key('status') \
            and pkg.has_key('package') \
            and installed_re.search(pkg['status']) \
            and linux_re.search(pkg['package']):
                kernel_version = linux_re.match(pkg['package']).group(1)
                if kernel_version != current:
                    removable_versions.append(kernel_version)
    removable_versions.sort(key=LooseVersion)
    # we don't want to delete the last version if it's more recent than current
    if LooseVersion(removable_versions[-1]) > LooseVersion(current) \
        and removable_versions[-1] != current:
        removable_versions.pop()
    if options.quiet is False:
        print "Version to be removed:"
        for v in removable_versions:
            print v
    return removable_versions

def make_disk_space(kernels,options):
    # we make some disk space first in case the partition is full
    for k in kernels:
        initrd = "/boot/initrd.img-%s" % k 
        if os.path.isfile(initrd):
            # TODO Check that the command succeed
            if options.clean is True:
                shutil.copy('/dev/null', initrd )
            else:
                if options.verbose is True:
                    print(("cp /dev/null %s" % initrd))

def aptfixinstall(options):
    # in worst cases, the latest install failed because of a full partition.
    # we fix that first
    cmd = 'apt-get -f install'
    execute(cmd,options)

def removekernels(kernels,options):
    # the goal! removing those unused kernels
    if options.yes is True:
        args = '--yes '
    else:
        args = ''
    package_list = []
    for k in kernels:
        package_list.append('linux-image-%s' % k)
    cmd = 'apt-get remove %s%s' % (args, ' '.join(package_list))
    execute(cmd,options)

def execute(cmd,options):
    # TODO Check that the command exited succesfully or die
    if options.clean is True:
        os.system(cmd)
    else:
        if options.verbose is True:
            print(cmd) 

def main():
    usage = """
    bootgroom remove unused packaged kernels.
    It will keep the running and the latest kernel."""
    parser = OptionParser(usage=usage)
    parser.add_option("-v","--verbose",action="store_true",help="Display execution on stdout %default]", default=False)
    parser.add_option("-c", "--clean",action="store_true",help="Clean /boot", default=False)
    parser.add_option("-y", "--yes",action="store_true",help="Assume yes for apt-remove", default=False)
    parser.add_option("-q", "--quiet",action="store_true",help="No output", default=False)
    (options, args) = parser.parse_args()
    if options.clean is True and os.geteuid() != 0:
        print('You need to be root to use ---clean')
        sys.exit(1)
    removable_versions = removable_kernels(options=options)
    make_disk_space(removable_versions,options=options)
    aptfixinstall(options=options)
    removekernels(removable_versions,options=options)
    if options.quiet is False and options.clean is True:
        print('ahhh')

if __name__ == '__main__':
    main()
