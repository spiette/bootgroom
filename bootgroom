#!/usr/bin/env python

# This script will safely remove all unused kernels packages
# It will not remove the current kernel, or the latest kernel installed.
# It will not remove unpackaged kernels, as long as they didn't overwrite
# packaged kernels.
# By default it will also remove linux-headers packages

# 2011 GPLv2 or later
# Simon Piette <piette.simon@gmail.com>

import os
import sys
import re
import shutil
from glob import glob
from distutils.version import LooseVersion
from optparse import OptionParser
from debian_bundle import deb822

global options

def removable_packages(package_re,options):
    # re should be already compiled
    current = os.uname()[2]
    removable_versions = []
    installed_re = re.compile(r'^(\w+) (\w+) installed$')
    # We're looking for installed linux-image-{version} packages
    for pkg in deb822.Packages.iter_paragraphs(file('/var/lib/dpkg/status')):
        if  pkg.has_key('status') \
            and pkg.has_key('package') \
            and installed_re.search(pkg['status']) \
            and package_re.search(pkg['package']):
                package_version = package_re.match(pkg['package']).group(1)
                if package_version != current:
                    removable_versions.append(package_version)
    removable_versions.sort(key=LooseVersion)
    # we don't want to delete the last version if it's more recent than current
    if LooseVersion(removable_versions[-1]) > LooseVersion(current) \
        and removable_versions[-1] != current:
        removable_versions.pop()
    if options.quiet is False:
        print "Version to be removed:"
        for v in removable_versions:
            print v
    return removable_versions

def make_disk_space(kernels,options):
    # we make some disk space first in case the partition is full
    for k in kernels:
        initrd = "/boot/initrd.img-%s" % k 
        if os.path.isfile(initrd):
            # TODO Check that the command succeed
            if options.clean is True:
                shutil.copy('/dev/null', initrd )
            else:
                if options.verbose is True:
                    print(("cp /dev/null %s" % initrd))

def aptfixinstall(options):
    # in worst cases, the latest install failed because of a full partition.
    # we fix that first
    cmd = 'apt-get -f install'
    execute(cmd,options)

def remove_package_versions(package,versions,options):
    if options.yes is True:
        args = '--yes '
    else:
        args = ''
    package_list = []
    for version in versions:
        package_list.append('%s-%s' % ( package, version))
    cmd = 'apt-get remove %s%s' % (args, ' '.join(package_list))
    execute(cmd,options)

def execute(cmd,options):
    # TODO Check that the command exited succesfully or die
    if options.clean is True:
        os.system(cmd)
    else:
        if options.verbose is True:
            print(cmd) 

def main():
    usage = """
    bootgroom remove unused packaged kernels.
    It will keep the running and the latest kernel."""
    parser = OptionParser(usage=usage)
    parser.add_option("-v","--verbose",action="store_true",help="Display execution on stdout", default=False)
    parser.add_option("-H", "--keep-headers",action="store_true",help="Don't remove linux-headers-* packages", default=False)
    parser.add_option("-c", "--clean",action="store_true",help="Clean /boot", default=False)
    parser.add_option("-y", "--yes",action="store_true",help="Assume yes for apt-remove", default=False)
    parser.add_option("-Y", "--oh-yes",action="store_true",help="Assume yes (add -y for apt-remove)", default=False)
    parser.add_option("-q", "--quiet",action="store_true",help="No output", default=False)
    (options, args) = parser.parse_args()

    if options.quiet is False:
        print 'Checking linux-image'
    linux_re = re.compile(r'^linux-image-(\d+.*)')
    linux_versions = removable_packages(linux_re, options)
    if options.keep_headers is False:
        if options.quiet is False:
            print 'Checking linux-headers'
        headers_re = re.compile(r'^linux-headers-(\d+.*)')
        headers_versions = removable_packages(headers_re, options)

    if options.clean is True:
        if os.geteuid() != 0:
            print('You need to be root to use ---clean')
            sys.exit(1)
        else:
            # confirmation:
            if options.oh_yes is False:
                prompt = 'Remove? [Y|n|q] '
                try:
                    # Python 2
                    answer = raw_input(prompt)
                except NameError:
                    # Python 3
                    answer = input(prompt)

                if answer.find('y', 0, 1) == 0 or answer.find('Y', 0, 1) == 0:
                    print 'yes'
                elif answer.find('n', 0, 1) == 0 or answer.find('N', 0, 1) == 0:
                    options.clean = False
                    if options.verbose is True:
                        print('Commands to be run:')
                else:
                    print('Nothing removed')
                    sys.exit(0)

    make_disk_space(linux_versions,options=options)
    aptfixinstall(options=options)
    remove_package_versions('linux-image', linux_versions,options=options)
    if options.keep_headers is False:
        remove_package_versions('linux-headers', headers_versions,options=options)
    if options.quiet is False and options.clean is True:
        print('ahhh')

if __name__ == '__main__':
    main()
