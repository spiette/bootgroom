#!/usr/bin/env python

# This script will safely remove all unused kernels packages
# It will not remove the current kernel, or the latest kernel installed.
# It will not remove unpackaged kernels, as long as they didn't overwrite
# packaged kernels.

# 2011 GPLv2 or later
# Simon Piette <piette.simon@gmail.com>

import os
import re
import shutil
from glob import glob
from distutils.version import LooseVersion
from optparse import OptionParser
from debian_bundle import deb822

# which version are we running (uname -r)
current = os.uname()[2]

global options

def removable_kernels(options):
    removable_versions = []
    os.chdir('/var/lib/dpkg/info')
    # we use r'string' so we don't have to escape backslashes
    version_re = re.compile(r'linux-image-(\d.*).md5sums')
    for k in glob('linux-image-*.md5sums'):
        m = version_re.match(k)
        if m is None:
            next
        elif m.group(1) == current:
            next
        else:
            removable_versions.append(m.group(1))
    removable_versions.sort(key=LooseVersion)
    # we don't to delete the last version
    if removable_versions[-1] != current:
        removable_versions.pop()
    if options.verbose is True:
        print "Version to be removed:"
        for v in removable_versions:
            print v
    return removable_versions

def make_disk_space(kernels,options):
    # we make some disk space first in case the partition is full
    for k in kernels:
        initrd = "/boot/initrd.img-%s" % k 
        if os.path.isfile(initrd):
            # TODO Check that the command succeed
            if options.clean is True:
                shutil.copy('/dev/null', initrd )
            else:
                print(("cp /dev/null %s" % initrd))

def aptfixinstall(options):
    # in worst cases, the latest install failed because of a full partition.
    # we fix that first
    cmd = 'apt-get -f install'
    execute(cmd,options)

def removekernels(kernels,options):
    # the goal! removing those unused kernels
    package_list = []
    for k in kernels:
        package_list.append('linux-image-%s' % k)
    cmd = 'apt-get remove %s' % ' '.join(package_list)
    execute(cmd,options)
    print('ahhh')
def execute(cmd,options):
    # TODO Check that the command exited succesfully or die
    if options.clean is True:
        os.system(cmd)
    else:
        print(cmd) 

def main():
    usage = """
    bootgroom remove unused packaged kernels.
    It will keep the running and the latest kernel."""
    parser = OptionParser(usage=usage)
    parser.add_option("-v","--verbose",action="store_true",help="Display execution on stdout %default]", default=False)
    parser.add_option("-c", "--clean",action="store_true",help="Clean /boot", default=False)
    (options, args) = parser.parse_args()
    removable_versions = removable_kernels(options=options)
    make_disk_space(removable_versions,options=options)
    aptfixinstall(options=options)
    removekernels(removable_versions,options=options)

if __name__ == '__main__':
    main()
